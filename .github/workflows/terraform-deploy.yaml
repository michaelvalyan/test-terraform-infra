name: "Workflow - Deploy terrafrom to multy-account AWS environment"
on:
  push:
    branches:
      - "devbranch-michael"
  pull_request:
    branches:
      - staging
      - main

permissions:
  id-token: write
  contents: read

env: 
  AWS_REGION: us-east-1
  ENVIRONMENT_STAGE: ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'development' }} 


jobs:
  deploy-terraform:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./roots/devops-project-main/
        shell: bash
    
    environment:  ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'development' }}
    
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.MG_ROLE }}
          role-session-name: GitHubActionsRoleSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Assume Role in Target Account
        id: assume_target_account
        run: |
          ROLE_ARN=${{ secrets.CICD_IAM_ROLE }}
          CREDENTIALS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name GitHubActionsSession)
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          terraform init -backend-config="bucket=${AWS_ACCOUNT_ID}-state-bucket-${ENVIRONMENT_STAGE}" -backend-config="key=main.tfstate"

      - name: Terraform Format
        run: terraform fmt

      - name: Terraform Plan
        run: terraform plan -input=false -var-file=${ENVIRONMENT_STAGE}.tfvars

      # - name: Terraform Apply
      #   run: |
      #     terraform apply -auto-approve -input=false -var-file="${ENVIRONMENT_STAGE}.tfvars"

      # - name: Terraform Destroy
      #   run: |
      #     terraform destroy -auto-approve -input=false -var-file="${ENVIRONMENT_STAGE}.tfvars"